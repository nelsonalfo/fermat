apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'gradle-one-jar'


group = "com.bitdubai.fermat.p2p"
sourceCompatibility = 1.7
version = '1.6.1'

configurations {
    deployerJars
}

jar {
    manifest {
        attributes 'Implementation-Title': 'fermat-p2p-plugin-communication-cloud-server-bitdubai',
                   'Implementation-Version': version
    }

}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}


task serverJar(type: OneJar) {
    mainClass = 'com.bitdubai.fermat_p2p_plugin.layer.ws.communications.cloud.server.developer.bitdubai.version_1.WsCommunicationsServerCloudMainRunner'
    archiveName = project.name + '-with-dependencies-' + version + ".jar"
    additionalDir = file('src/main/resources/one-jar.properties')
}


repositories {
	mavenCentral()
	maven {
		url "https://repository-fermat.forge.cloudbees.com/release/"
		credentials {
			username 'bitdubai.repo'
			password 'bud@pestdcd16c'
		}
	}
    maven {
        url "http://maven.restlet.org"
    }

    maven {
        url "https://clojars.org/repo/"
    }

}

dependencies {

    //compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':fermat-api')
    compile project(':fermat-p2p-api')
    compile project(':fermat-pip-api')
    compile 'org.eclipse.jetty:jetty-server:9.2.14.v20151106'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.2.14.v20151106'
    compile 'org.eclipse.jetty.websocket:websocket-api:9.2.14.v20151106'
    compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.2.14.v20151106'
    compile 'org.eclipse.jetty:jetty-servlet:9.2.14.v20151106'
    compile 'org.eclipse.jetty:jetty-webapp:9.2.14.v20151106'
    compile 'org.jboss.resteasy:resteasy-jaxrs:3.0.14.Final'
    compile 'org.jboss.resteasy:resteasy-jaxb-provider:3.0.14.Final'
    compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.14.Final'
    compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.14.Final'
    compile 'org.jboss.resteasy:async-http-servlet-3.0:3.0.14.Final'
    compile 'com.google.code.gson:gson:2.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.13'
    testCompile 'junit:junit:4.11'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'com.googlecode.catch-exception:catch-exception:1.2.0'
    deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
//    compile files('src/main/libs/cling-core-2.1.0.jar')
//    compile files('src/main/libs/cling-support-2.1.0.jar')
//    compile files('src/main/libs/seamless-http-1.1.1.jar')
//    compile files('src/main/libs/seamless-util-1.1.1.jar')
//    compile files('src/main/libs/seamless-xml-1.1.1.jar')
}

pmd {
	toolVersion = '5.1.3'
}

test {
	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
}

uploadArchives {
                
    repositories {
   
        flatDir {
            
            dirs 'repos'
        }

	mavenDeployer {
            configuration = configurations.deployerJars
            repository (url: "dav:https://repository-fermat.forge.cloudbees.com/release/") {
                authentication(userName: 'raul-pena', password: 'bAvE19G77_')
            }
        }
    }
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task jenkins(dependsOn: ['clean', 'check', 'jacocoTestReport']) << {
	println 'Estos son los chequeos que se tienen que pasar antes de hacer push al servidor Jenkins'
}

task copyLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

task fatJar(type: Jar) {
    baseName = project.name + '-with-dependencies'

    manifest {
        attributes 'Implementation-Title': 'Standalone Jar Prototype',
                'Implementation-Version': version,
                'Main-Class': 'com.bitdubai.fermat_p2p_plugin.layer.ws.communications.cloud.server.developer.bitdubai.version_1.WsCommunicationsServerCloudMainRunner'
    }

    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }


    with jar
}


check.mustRunAfter clean
jacocoTestReport.mustRunAfter check
